
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE ELSE EQUALS FLOAT GREATER ID IF INT INVALID_ID LBRACE LESS LPAREN MINUS NUMBER PLUS RBRACE RPAREN SEMICOLON THEN TIMES WHILEprogram : statement_liststatement_list : statement statement_list\n                      | statementstatement : INT ID EQUALS expression SEMICOLON\n                 | FLOAT ID EQUALS expression SEMICOLONstatement : ID EQUALS expression SEMICOLONexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : NUMBER\n              | ID\n              | LPAREN expression RPARENstatement : IF LPAREN condition RPAREN LBRACE statement_list RBRACEcondition : expression GREATER expression\n                 | expression LESS expression\n                 | expression EQUALS expression'
    
_lr_action_items = {'INT':([0,3,24,35,41,42,47,],[4,4,-6,-4,-5,4,-16,]),'FLOAT':([0,3,24,35,41,42,47,],[6,6,-6,-4,-5,6,-16,]),'ID':([0,3,4,6,10,12,13,19,20,24,25,26,27,28,32,33,34,35,41,42,47,],[5,5,9,11,14,14,14,14,14,-6,14,14,14,14,14,14,14,-4,-5,5,-16,]),'IF':([0,3,24,35,41,42,47,],[7,7,-6,-4,-5,7,-16,]),'$end':([1,2,3,8,24,35,41,47,],[0,-1,-3,-2,-6,-4,-5,-16,]),'RBRACE':([3,8,24,35,41,46,47,],[-3,-2,-6,-4,-5,47,-16,]),'EQUALS':([5,9,11,14,16,17,18,22,36,37,38,39,40,],[10,13,20,-14,-9,-12,-13,34,-7,-8,-10,-11,-15,]),'LPAREN':([7,10,12,13,19,20,25,26,27,28,32,33,34,],[12,19,19,19,19,19,19,19,19,19,19,19,19,]),'NUMBER':([10,12,13,19,20,25,26,27,28,32,33,34,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'TIMES':([14,16,17,18,36,37,38,39,40,],[-14,27,-12,-13,27,27,-10,-11,-15,]),'DIVIDE':([14,16,17,18,36,37,38,39,40,],[-14,28,-12,-13,28,28,-10,-11,-15,]),'SEMICOLON':([14,15,16,17,18,23,30,36,37,38,39,40,],[-14,24,-9,-12,-13,35,41,-7,-8,-10,-11,-15,]),'PLUS':([14,15,16,17,18,22,23,29,30,36,37,38,39,40,43,44,45,],[-14,25,-9,-12,-13,25,25,25,25,-7,-8,-10,-11,-15,25,25,25,]),'MINUS':([14,15,16,17,18,22,23,29,30,36,37,38,39,40,43,44,45,],[-14,26,-9,-12,-13,26,26,26,26,-7,-8,-10,-11,-15,26,26,26,]),'GREATER':([14,16,17,18,22,36,37,38,39,40,],[-14,-9,-12,-13,32,-7,-8,-10,-11,-15,]),'LESS':([14,16,17,18,22,36,37,38,39,40,],[-14,-9,-12,-13,33,-7,-8,-10,-11,-15,]),'RPAREN':([14,16,17,18,21,29,36,37,38,39,40,43,44,45,],[-14,-9,-12,-13,31,40,-7,-8,-10,-11,-15,-17,-18,-19,]),'LBRACE':([31,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,42,],[2,8,46,]),'statement':([0,3,42,],[3,3,3,]),'expression':([10,12,13,19,20,32,33,34,],[15,22,23,29,30,43,44,45,]),'term':([10,12,13,19,20,25,26,32,33,34,],[16,16,16,16,16,36,37,16,16,16,]),'factor':([10,12,13,19,20,25,26,27,28,32,33,34,],[17,17,17,17,17,17,17,38,39,17,17,17,]),'condition':([12,],[21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',11),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',12),
  ('statement -> INT ID EQUALS expression SEMICOLON','statement',5,'p_statement_declaration','parser.py',16),
  ('statement -> FLOAT ID EQUALS expression SEMICOLON','statement',5,'p_statement_declaration','parser.py',17),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','parser.py',22),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',26),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',27),
  ('expression -> term','expression',1,'p_expression','parser.py',28),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',31),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',32),
  ('term -> factor','term',1,'p_term','parser.py',33),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',36),
  ('factor -> ID','factor',1,'p_factor','parser.py',37),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',38),
  ('statement -> IF LPAREN condition RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_if','parser.py',42),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser.py',46),
  ('condition -> expression LESS expression','condition',3,'p_condition','parser.py',47),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','parser.py',48),
]
